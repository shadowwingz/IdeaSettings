<application>
  <component name="AppStorage">
    <histories>
      <item value="if this Field object is enforcing Java language access control and the underlying field is either inaccessible or final." />
      <item value="The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. These constants are used in {@link Target java.lang.annotation.Target} meta-annotations to specify where it is legal to write annotations of a given type." />
      <item value="Canonical" />
      <item value="Column" />
      <item value="This is an example of a post-inflation interceptor that modifies the properties of a view after it has been created. Here we prefix the text for any view that has been replaced with a custom version by the {@link CustomTextViewInterceptor}." />
      <item value="Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP. This requires potentially-expensive reflection so it is best to build each service method only once and reuse it." />
      <item value="Create an implementation of the API endpoints defined by the {@code service} interface. &lt;p&gt; The relative path for a given method is obtained from an annotation on the method describing the request type. The built-in methods are {@link retrofit2.http.GET GET}, {@link retrofit2.http.PUT PUT}, {@link retrofit2.http.POST POST}, {@link retrofit2.http.PATCH PATCH}, {@link retrofit2.http.HEAD HEAD}, {@link retrofit2.http.DELETE DELETE} and {@link retrofit2.http.OPTIONS OPTIONS}. You can use a custom HTTP method with {@link HTTP @HTTP}. For a dynamic URL, omit the path on the annotation and annotate the first parameter with {@link Url @Url}. &lt;p&gt; Method parameters can be used to replace parts of the URL by annotating them with {@link retrofit2.http.Path @Path}. Replacement sections are denoted by an identifier surrounded by curly braces (e.g., &quot;{foo}&quot;). To add items to the query string of a URL use {@link retrofit2.http.Query @Query}. &lt;p&gt; The body of a request is denoted by the {@link retrofit2.http.Body @Body} annotation. The object will be converted to request representation by one of the {@link Converter.Factory} instances. A {@link RequestBody} can also be used for a raw representation. &lt;p&gt; Alternative request body formats are supported by method annotations and corresponding parameter annotations: &lt;ul&gt; &lt;li&gt;{@link retrofit2.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value pairs specified by the {@link retrofit2.http.Field @Field} parameter annotation. &lt;li&gt;{@link retrofit2.http.Multipart @Multipart} - RFC 2388-compliant multipart data with parts specified by the {@link retrofit2.http.Part @Part} parameter annotation. &lt;ul&gt; &lt;p&gt; Additional static headers can be added for an endpoint using the {@link retrofit2.http.Headers @Headers} method annotation. For per-request control over a header annotate a parameter with {@link Header @Header}. &lt;p&gt; By default, methods return a {@link Call} which represents the HTTP request. The generic parameter of the call is the response body type and will be converted by one of the {@link Converter.Factory} instances. {@link ResponseBody} can also be used for a raw representation. {@link Void} can be used if you do not care about the body contents. &lt;p&gt; For example: &lt;pre&gt; public interface CategoryService { &amp;64;POST(&quot;category{cat}&quot;) Call&amp;lt;List&amp;lt;Item&amp;gt;&amp;gt; categoryList(@Path(&quot;cat&quot;) String a, @Query(&quot;page&quot;) int b); } &lt;pre&gt;" />
      <item value="are {@link retrofit2.http.GET GET}, {@link retrofit2.http.PUT PUT}, {@link retrofit2.http.POST POST}, {@link retrofit2.http.PATCH PATCH}, {@link retrofit2.http.HEAD HEAD}, {@link retrofit2.http.DELETE DELETE} and {@link retrofit2.http.OPTIONS OPTIONS}. You can use a custom HTTP method with {@link HTTP @HTTP}. For a dynamic URL, omit the path on the annotation and annotate the first parameter with {@link Url @Url}." />
      <item value="You can use a custom HTTP method with {@link HTTP @HTTP}. For a dynamic URL, omit the path on the annotation and annotate the first parameter with {@link Url @Url}." />
      <item value="The relative path for a given method is obtained from an annotation on the method describing the request type" />
      <item value="Create an implementation of the API endpoints defined by the {@code service} interface." />
      <item value="cornerRadius = mCornerRadius.toFloat() } // 根据圆角位置设置圆角半径 else { cornerRadii = getCornerRadiusByPosition() } // 默认的透明边框不绘制 if (mStrokeColor != 0) { setStroke(m" />
      <item value="trokeColor != 0) { setStroke(mSt" />
      <item value="/** * Specifies radii for each of the 4 corners. For each corner, the array * contains 2 values, &lt;code&gt;[X_radius, Y_radius]&lt;/code&gt;. The corners are * ordered top-left, top-right, bottom-right, bottom-left. This property * is honored only when the shape is of type {@link #RECTANGLE}. * &lt;p&gt; * &lt;strong&gt;Note&lt;/strong&gt;: changing this property will affect all instances * of a drawable loaded from a resource. It is recommended to invoke * {@link #mutate()} before changing this property. * * @param radii an array of length &gt;= 8 containing 4 pairs of X and Y * radius for each corner, specified in pixels * * @see #mutate() * @see #setShape(int) * @see #setCornerRadius(float) */" />
      <item value="/** * Launches new coroutine without blocking current thread and returns a reference to the coroutine as a [Job]. * The coroutine is cancelled when the resulting job is [cancelled][Job.cancel]. * * Coroutine context is inherited from a [CoroutineScope], additional context elements can be specified with [context] argument. * If the context does not have any dispatcher nor any other [ContinuationInterceptor], then [Dispatchers.Default] is used. * The parent job is inherited from a [CoroutineScope] as well, but it can also be overridden * with corresponding [coroutineContext] element. * * By default, the coroutine is immediately scheduled for execution. * Other start options can be specified via `start` parameter. See [CoroutineStart] for details. * An optional [start] parameter can be set to [CoroutineStart.LAZY] to start coroutine _lazily_. In this case, * the coroutine [Job] is created in _new_ state. It can be explicitly started with [start][Job.start] function * and will be started implicitly on the first invocation of [join][Job.join]. * * Uncaught exceptions in this coroutine cancel parent job in the context by default * (unless [CoroutineExceptionHandler] is explicitly specified), which means that when `launch` is used with * the context of another coroutine, then any uncaught exception leads to the cancellation of parent coroutine. * * See [newCoroutineContext] for a description of debugging facilities that are available for newly created coroutine. * * @param context additional to [CoroutineScope.coroutineContext] context of the coroutine. * @param start coroutine start option. The default value is [CoroutineStart.DEFAULT]. * @param block the coroutine code which will be invoked in the context of the provided scope. **/" />
      <item value="/** * Obtains the current continuation instance inside suspend functions and suspends * the currently running coroutine. * * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in * the same stack-frame where the suspension function is run or asynchronously later in the same thread or * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException]. */" />
      <item value="Both fields guarded by 'FOREST'." />
      <item value="&lt;p&gt;" />
      <item value="window manager lock held." />
      <item value="Concrete" />
      <item value="Mediator" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="16" />
        <entry key="ENGLISH" value="17" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1639279818220" />
  </component>
</application>